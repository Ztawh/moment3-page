@import"https://necolas.github.io/normalize.css/8.0.1/normalize.css";*{box-sizing:border-box;margin:0;padding:0}h1{font-size:4rem;text-align:center;padding-top:3rem}@media screen and (max-width: 550px){h1{font-size:3rem}}h2{font-size:2rem}body{background:linear-gradient(-70deg, #fca062, #cf6593, #a96bce, #23abd5);background-repeat:no-repeat;background-attachment:fixed;color:#fff;height:100vh}@media screen and (prefers-color-scheme: dark){body{background:linear-gradient(-70deg, #e25b01, #e44d8e, #8f2fc7, #02495f);background-repeat:no-repeat;background-attachment:fixed;color:#fff;height:100vh}}#container{max-width:2000px;margin:auto}main{padding:0 1rem}#nav-icon{display:none}@media screen and (max-width: 550px){#nav-icon{display:initial;font-size:2.5rem;padding:1rem}}header{height:350px;display:block}.flex-container{display:flex}@media screen and (max-width: 550px){.flex-container{flex-direction:column}}@media screen and (max-width: 550px){#article2{flex-direction:column-reverse}}.images-right,.images-left{display:flex;justify-content:center;margin:5rem 0 0 2rem}.images-right img,.images-left img{width:200px;height:200px;border-radius:50%;object-fit:cover}.images-left{margin:5rem 2rem 0 0}@media screen and (max-width: 550px){.images-right,.images-left{margin:4rem auto 0 auto}}article{max-width:700px;margin:0 auto 7rem auto}@media screen and (max-width: 550px){article{margin:0 auto 4rem auto}}article p{margin-top:1rem;text-align:justify}nav{width:100%}nav ul{display:flex;list-style-type:none}@media screen and (max-width: 550px){nav ul{flex-direction:column}}nav li{text-align:right}nav a{text-decoration:none;display:flex;padding:1rem;font-size:1.5rem;color:#fff;transition:ease .3s}@media screen and (min-width: 900px){nav a:hover{color:#fdc29b;letter-spacing:1px}}@media screen and (max-width: 550px){#navbar-desktop{display:none}}footer{text-align:center;padding:2rem 2rem 6rem 2rem}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjc3MvX2Jhc2Uuc2NzcyIsInNjc3MvX2NvbXBvbmVudC5zY3NzIiwic2Nzcy9fbGF5b3V0LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ1EscUVBOEJSLEVBQ0ksc0JBQ0EsU0FDQSxVQ2xDSixHQUNJLGVBQ0Esa0JBQ0EsaUJEaUJBLHFDQ3BCSixHQU1RLGdCQUlSLEdBQ0EsZUNYQSxLQUVJLFdGSU8sNERFSFAsNEJBQ0EsNEJBQ0EsV0FDQSxhRm9CQSwrQ0UxQkosS0FTUSxXRkpRLDRERUtSLDRCQUNBLDRCQUNBLFdBQ0EsY0FJUixXQUNJLGlCQUNBLFlBR0osS0FDSSxlQUdKLFVBQ0ksYUZQQSxxQ0VNSixVQUlRLGdCQUNBLGlCQUNBLGNBS1IsT0FDSSxhQUNBLGNBR0osZ0JBQ0ksYUZ2QkEscUNFc0JKLGdCQUlRLHVCRjFCSixxQ0U4QkosVUFFUSwrQkFLUiwyQkFDSSxhQUNBLHVCQUNBLE9GbkRlLGNFcURmLG1DQUNJLFlBQ0EsYUFDQSxrQkFDQSxpQkFJUixhQUNJLE9GN0RjLGNBVWQscUNFc0RKLDJCQUVRLHlCQUtSLFFBQ0ksZ0JBQ0Esd0JGL0RBLHFDRTZESixRQUtRLHlCQUdKLFVBQ0ksZ0JBQ0EsbUJBS1IsSUFDSSxXQUNBLE9BQ0ksYUFDQSxxQkZoRkoscUNFOEVBLE9BS1EsdUJBSVIsT0FDSSxpQkFHSixNQUNJLHFCQUNBLGFBQ0EsYUFDQSxpQkFDQSxNRjdHSyxLRThHTCxvQkZ2R0oscUNFMEdBLFlBRVEsY0FDQSxvQkZ2R1IscUNFNEdKLGdCQUVRLGNBS1IsT0FDSSxrQkFDQSxRRmpJWSIsImZpbGUiOiJzY3NzL21haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTm9sbHN0w6RsbGVyIHN0eWxpbmcgaSB3ZWJibMOkc2FyZW5cbkBpbXBvcnQgdXJsKFwiaHR0cHM6Ly9uZWNvbGFzLmdpdGh1Yi5pby9ub3JtYWxpemUuY3NzLzguMC4xL25vcm1hbGl6ZS5jc3NcIik7XG5cbi8vIFZhcmlhYmxlclxuLy8gbGluZWFyLWdyYWRpZW50KC03MGRlZywgI2ZjYTA2MiwgI2NmNjU5MywgIzkyNThiNCwgIzIzYWJkNSk7XG4kZ3JhZGllbnQtZGFyazogbGluZWFyLWdyYWRpZW50KC03MGRlZywgI2UyNWIwMSwgI2U0NGQ4ZSwgIzhmMmZjNywgIzAyNDk1Zik7XG4kZ3JhZGllbnQ6IGxpbmVhci1ncmFkaWVudCgtNzBkZWcsICNmY2EwNjIsICNjZjY1OTMsICNhOTZiY2UsICMyM2FiZDUpO1xuJGxpbmstY29sb3I6IGxpZ2h0ZW4oI2ZjYTA2MiwgODApO1xuJGZvb3Rlci1tYXJnaW46IDJyZW0gMnJlbSA2cmVtIDJyZW07XG4kaW1nLXJpZ2h0LW1hcmdpbjogNXJlbSAwIDAgMnJlbTtcbiRpbWctbGVmdC1tYXJnaW46IDVyZW0gMnJlbSAwIDA7XG5cbi8vIE1peGluc1xuQG1peGluIGRlc2t0b3Age1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDkwMHB4KXtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxufVxuXG5AbWl4aW4gbW9iaWxlIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NTBweCl7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbn1cblxuQG1peGluIGRhcmtNb2RlIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspe1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG59XG5cbioge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59IiwiaDEge1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZy10b3A6IDNyZW07XG5cbiAgICBAaW5jbHVkZSBtb2JpbGUge1xuICAgICAgICBmb250LXNpemU6IDNyZW07XG4gICAgfVxufVxuXG5oMiB7XG5mb250LXNpemU6IDJyZW07XG5cbn1cblxuIiwiYm9keSB7XG4gICAgLy8gYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC03MGRlZywgI2ZjYTA2MiwgI2NmNjU5MywgIzkyNThiNCwgIzIzYWJkNSk7XG4gICAgYmFja2dyb3VuZDogJGdyYWRpZW50O1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgaGVpZ2h0OiAxMDB2aDtcblxuICAgIEBpbmNsdWRlIGRhcmtNb2RlIHtcbiAgICAgICAgYmFja2dyb3VuZDogJGdyYWRpZW50LWRhcms7XG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICAgIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICB9XG59XG5cbiNjb250YWluZXIge1xuICAgIG1heC13aWR0aDogMjAwMHB4O1xuICAgIG1hcmdpbjogYXV0bztcbn1cblxubWFpbiB7XG4gICAgcGFkZGluZzogMCAxcmVtO1xufVxuXG4jbmF2LWljb24ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG5cbiAgICBAaW5jbHVkZSBtb2JpbGUge1xuICAgICAgICBkaXNwbGF5OiBpbml0aWFsO1xuICAgICAgICBmb250LXNpemU6IDIuNXJlbTtcbiAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICB9XG59XG5cblxuaGVhZGVyIHtcbiAgICBoZWlnaHQ6IDM1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4uZmxleC1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICBAaW5jbHVkZSBtb2JpbGUge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cbn1cblxuI2FydGljbGUyIHtcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG4gICAgfVxufVxuXG4vLyBCaWxkZXJcbi5pbWFnZXMtcmlnaHQsIC5pbWFnZXMtbGVmdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW46ICRpbWctcmlnaHQtbWFyZ2luO1xuXG4gICAgaW1nIHtcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIH1cbn1cblxuLmltYWdlcy1sZWZ0IHtcbiAgICBtYXJnaW46ICRpbWctbGVmdC1tYXJnaW47XG59XG5cbi5pbWFnZXMtcmlnaHQsIC5pbWFnZXMtbGVmdCB7XG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcbiAgICAgICAgbWFyZ2luOiA0cmVtIGF1dG8gMCBhdXRvO1xuICAgIH1cbn1cblxuLy8gQXJ0aWNsZXNcbmFydGljbGUge1xuICAgIG1heC13aWR0aDogNzAwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG8gN3JlbSBhdXRvO1xuXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gNHJlbSBhdXRvO1xuICAgIH1cblxuICAgIHAge1xuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIH1cbn1cblxuLy8gTmF2aWdhdGlvblxubmF2IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB1bCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcblxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxpIHtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgfVxuXG4gICAgYSB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgIGNvbG9yOiAkbGluay1jb2xvcjtcbiAgICAgICAgdHJhbnNpdGlvbjogZWFzZSAwLjNzO1xuICAgIH1cblxuICAgIGE6aG92ZXIge1xuICAgICAgICBAaW5jbHVkZSBkZXNrdG9wIHtcbiAgICAgICAgICAgIGNvbG9yOiBkYXJrZW4oJGxpbmstY29sb3IsIDIwKTtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiNuYXZiYXItZGVza3RvcCB7XG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG59XG5cbi8vIEZvb3RlclxuZm9vdGVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZzogJGZvb3Rlci1tYXJnaW5cbn1cbiJdfQ== */
